[06/14 19:12:05] detectron2 INFO: Rank of current process: 0. World size: 1
[06/14 19:12:06] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 | packaged by conda-forge | (default, Feb 19 2021, 16:07:37) [GCC 9.3.0]
numpy                   1.20.3
detectron2              0.4 @/home/adminis/anaconda3/envs/centermask2/lib/python3.7/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 11.0
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5, 8.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/home/adminis/anaconda3/envs/centermask2/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   GeForce RTX 3070 (arch=8.6)
CUDA_HOME               /usr/local/cuda-11.2
Pillow                  8.4.0
torchvision             0.8.2 @/home/adminis/anaconda3/envs/centermask2/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0
fvcore                  0.1.3.post20210317
cv2                     4.5.1
----------------------  ---------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/14 19:12:06] detectron2 INFO: Command line arguments: Namespace(config_file='configs/centermask/centermask_V_99_eSE_FPN_ms_3x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[06/14 19:12:06] detectron2 INFO: Contents of args.config_file=configs/centermask/centermask_V_99_eSE_FPN_ms_3x.yaml:
_BASE_: "Base-CenterMask-VoVNet.yaml"
MODEL:
  WEIGHTS: "https://www.dropbox.com/s/1mlv31coewx8trd/vovnet99_ese_detectron2.pth?dl=1"
  VOVNET:
    CONV_BODY : "V-99-eSE"
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000
OUTPUT_DIR: "output/centermask/CenterMask-V-99-ms-3x"

[06/14 19:12:06] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32, 64, 128, 256, 512]]
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_fcos_vovnet_fpn_backbone
  DEVICE: cuda
  FCOS:
    CENTER_SAMPLE: True
    FPN_STRIDES: [8, 16, 32, 64, 128]
    INFERENCE_TH_TEST: 0.05
    INFERENCE_TH_TRAIN: 0.05
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    LOC_LOSS_TYPE: giou
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.6
    NORM: GN
    NUM_BOX_CONVS: 4
    NUM_CLASSES: 80
    NUM_CLS_CONVS: 4
    NUM_SHARE_CONVS: 0
    POST_NMS_TOPK_TEST: 50
    POST_NMS_TOPK_TRAIN: 100
    POS_RADIUS: 1.5
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 1000
    PRIOR_PROB: 0.01
    SIZES_OF_INTEREST: [64, 128, 256, 512]
    THRESH_WITH_CTR: False
    TOP_LEVELS: 2
    USE_DEFORMABLE: False
    USE_RELU: True
    USE_SCALE: True
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['stage3', 'stage4', 'stage5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASKIOU_LOSS_WEIGHT: 1.0
  MASKIOU_ON: True
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  MOBILENET: False
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: FCOS
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res4']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: 
    NORM: 
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: CenterROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    ASSIGN_CRITERION: ratio
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASKIOU_HEAD:
    CONV_DIM: 256
    NAME: MaskIoUHead
    NUM_CONV: 4
  ROI_MASK_HEAD:
    ASSIGN_CRITERION: ratio
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: SpatialAttentionMaskHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  VOVNET:
    BACKBONE_OUT_CHANNELS: 256
    CONV_BODY: V-99-eSE
    DEFORMABLE_GROUPS: 1
    NORM: FrozenBN
    OUT_CHANNELS: 256
    OUT_FEATURES: ['stage3', 'stage4', 'stage5']
    STAGE_WITH_DCN: (False, False, False, False)
    WITH_MODULATED_DCN: False
  WEIGHTS: https://www.dropbox.com/s/1mlv31coewx8trd/vovnet99_ese_detectron2.pth?dl=1
OUTPUT_DIR: output/centermask/CenterMask-V-99-ms-3x
SEED: -1
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.01
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 10000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 1
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (210000, 250000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/14 19:12:06] detectron2 INFO: Full config saved to output/centermask/CenterMask-V-99-ms-3x/config.yaml
[06/14 19:12:06] d2.utils.env INFO: Using a generated random seed 7204565
[06/14 19:12:08] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): VoVNet(
      (stem): Sequential(
        (stem_1/conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (stem_1/norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (stem_1/relu): ReLU(inplace=True)
        (stem_2/conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (stem_2/norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (stem_2/relu): ReLU(inplace=True)
        (stem_3/conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (stem_3/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (stem_3/relu): ReLU(inplace=True)
      )
      (stage2): _OSA_stage(
        (OSA2_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA2_1_0/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_0/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA2_1_1/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_1/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA2_1_2/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_2/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA2_1_3/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_3/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA2_1_4/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_4/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA2_1_concat/conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA2_1_concat/norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            (OSA2_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
      (stage3): _OSA_stage(
        (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (OSA3_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA3_1_0/conv): Conv2d(256, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_0/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA3_1_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_1/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA3_1_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_2/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA3_1_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_3/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA3_1_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_4/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA3_1_concat/conv): Conv2d(1056, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA3_1_concat/norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            (OSA3_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA3_2): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA3_2_0/conv): Conv2d(512, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_0/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA3_2_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_1/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA3_2_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_2/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA3_2_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_3/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA3_2_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_4/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA3_2_concat/conv): Conv2d(1312, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA3_2_concat/norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            (OSA3_2_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA3_3): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA3_3_0/conv): Conv2d(512, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_0/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA3_3_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_1/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA3_3_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_2/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA3_3_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_3/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA3_3_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_4/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA3_3_concat/conv): Conv2d(1312, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA3_3_concat/norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            (OSA3_3_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
      (stage4): _OSA_stage(
        (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (OSA4_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_1_0/conv): Conv2d(512, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_1_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_1_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_1_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_1_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_1_concat/conv): Conv2d(1472, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_1_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_2): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_2_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_2_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_2_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_2_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_2_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_2_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_2_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_2_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_3): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_3_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_3_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_3_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_3_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_3_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_3_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_3_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_3_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_4): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_4_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_4_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_4_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_4_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_4_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_4_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_4_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_4_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_5): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_5_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_5_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_5_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_5_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_5_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_5_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_5_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_5_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_6): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_6_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_6_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_6_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_6_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_6_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_6_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_6_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_6_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_7): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_7_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_7_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_7_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_7_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_7_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_7_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_7_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_7_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_8): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_8_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_8_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_8_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_8_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_8_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_8_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_8_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_8_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_9): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_9_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_9_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_9_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_9_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_9_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_9_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_9_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_9_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
      (stage5): _OSA_stage(
        (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (OSA5_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA5_1_0/conv): Conv2d(768, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_0/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA5_1_1/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_1/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA5_1_2/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_2/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA5_1_3/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_3/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA5_1_4/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_4/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA5_1_concat/conv): Conv2d(1888, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA5_1_concat/norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            (OSA5_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA5_2): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA5_2_0/conv): Conv2d(1024, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_0/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA5_2_1/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_1/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA5_2_2/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_2/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA5_2_3/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_3/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA5_2_4/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_4/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA5_2_concat/conv): Conv2d(2144, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA5_2_concat/norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            (OSA5_2_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA5_3): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA5_3_0/conv): Conv2d(1024, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_0/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA5_3_1/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_1/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA5_3_2/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_2/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA5_3_3/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_3/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA5_3_4/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_4/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA5_3_concat/conv): Conv2d(2144, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA5_3_concat/norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            (OSA5_3_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
    )
  )
  (proposal_generator): FCOS(
    (iou_loss): IOULoss()
    (fcos_head): FCOSHead(
      (cls_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (bbox_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (share_tower): Sequential()
      (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (scales): ModuleList(
        (0): Scale()
        (1): Scale()
        (2): Scale()
        (3): Scale()
        (4): Scale()
      )
    )
  )
  (roi_heads): CenterROIHeads(
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): SpatialAttentionMaskHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (spatialAtt): SpatialAttention(
        (conv): Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (sigmoid): Sigmoid()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
    (maskiou_head): MaskIoUHead(
      (maskiou_fcn1): Conv2d(257, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (maskiou_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (maskiou_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (maskiou_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (maskiou_fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (maskiou_fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (maskiou): Linear(in_features=1024, out_features=80, bias=True)
      (pooling): MaxPool2d(kernel_size=[2, 2], stride=[2, 2], padding=[0, 0], dilation=[1, 1], ceil_mode=False)
    )
  )
)
[06/14 19:16:15] detectron2 INFO: Rank of current process: 0. World size: 1
[06/14 19:16:15] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 | packaged by conda-forge | (default, Feb 19 2021, 16:07:37) [GCC 9.3.0]
numpy                   1.20.3
detectron2              0.4 @/home/adminis/anaconda3/envs/centermask2/lib/python3.7/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 11.0
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5, 8.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/home/adminis/anaconda3/envs/centermask2/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   GeForce RTX 3070 (arch=8.6)
CUDA_HOME               /usr/local/cuda-11.2
Pillow                  8.4.0
torchvision             0.8.2 @/home/adminis/anaconda3/envs/centermask2/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0
fvcore                  0.1.3.post20210317
cv2                     4.5.1
----------------------  ---------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[06/14 19:16:15] detectron2 INFO: Command line arguments: Namespace(config_file='configs/centermask/centermask_V_99_eSE_FPN_ms_3x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[06/14 19:16:15] detectron2 INFO: Contents of args.config_file=configs/centermask/centermask_V_99_eSE_FPN_ms_3x.yaml:
_BASE_: "Base-CenterMask-VoVNet.yaml"
MODEL:
  WEIGHTS: "https://www.dropbox.com/s/1mlv31coewx8trd/vovnet99_ese_detectron2.pth?dl=1"
  VOVNET:
    CONV_BODY : "V-99-eSE"
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000
OUTPUT_DIR: "output/centermask/CenterMask-V-99-ms-3x"

[06/14 19:16:15] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32, 64, 128, 256, 512]]
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_fcos_vovnet_fpn_backbone
  DEVICE: cuda
  FCOS:
    CENTER_SAMPLE: True
    FPN_STRIDES: [8, 16, 32, 64, 128]
    INFERENCE_TH_TEST: 0.05
    INFERENCE_TH_TRAIN: 0.05
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    LOC_LOSS_TYPE: giou
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.6
    NORM: GN
    NUM_BOX_CONVS: 4
    NUM_CLASSES: 80
    NUM_CLS_CONVS: 4
    NUM_SHARE_CONVS: 0
    POST_NMS_TOPK_TEST: 50
    POST_NMS_TOPK_TRAIN: 100
    POS_RADIUS: 1.5
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 1000
    PRIOR_PROB: 0.01
    SIZES_OF_INTEREST: [64, 128, 256, 512]
    THRESH_WITH_CTR: False
    TOP_LEVELS: 2
    USE_DEFORMABLE: False
    USE_RELU: True
    USE_SCALE: True
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['stage3', 'stage4', 'stage5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASKIOU_LOSS_WEIGHT: 1.0
  MASKIOU_ON: True
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  MOBILENET: False
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: FCOS
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res4']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: 
    NORM: 
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: CenterROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    ASSIGN_CRITERION: ratio
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASKIOU_HEAD:
    CONV_DIM: 256
    NAME: MaskIoUHead
    NUM_CONV: 4
  ROI_MASK_HEAD:
    ASSIGN_CRITERION: ratio
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: SpatialAttentionMaskHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  VOVNET:
    BACKBONE_OUT_CHANNELS: 256
    CONV_BODY: V-99-eSE
    DEFORMABLE_GROUPS: 1
    NORM: FrozenBN
    OUT_CHANNELS: 256
    OUT_FEATURES: ['stage3', 'stage4', 'stage5']
    STAGE_WITH_DCN: (False, False, False, False)
    WITH_MODULATED_DCN: False
  WEIGHTS: https://www.dropbox.com/s/1mlv31coewx8trd/vovnet99_ese_detectron2.pth?dl=1
OUTPUT_DIR: output/centermask/CenterMask-V-99-ms-3x
SEED: -1
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.01
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 10000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 1
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: (210000, 250000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[06/14 19:16:15] detectron2 INFO: Full config saved to output/centermask/CenterMask-V-99-ms-3x/config.yaml
[06/14 19:16:15] d2.utils.env INFO: Using a generated random seed 16685358
[06/14 19:16:17] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): VoVNet(
      (stem): Sequential(
        (stem_1/conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (stem_1/norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (stem_1/relu): ReLU(inplace=True)
        (stem_2/conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (stem_2/norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        (stem_2/relu): ReLU(inplace=True)
        (stem_3/conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (stem_3/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        (stem_3/relu): ReLU(inplace=True)
      )
      (stage2): _OSA_stage(
        (OSA2_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA2_1_0/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_0/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA2_1_1/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_1/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA2_1_2/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_2/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA2_1_3/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_3/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA2_1_4/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA2_1_4/norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
              (OSA2_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA2_1_concat/conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA2_1_concat/norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            (OSA2_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
      (stage3): _OSA_stage(
        (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (OSA3_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA3_1_0/conv): Conv2d(256, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_0/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA3_1_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_1/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA3_1_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_2/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA3_1_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_3/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA3_1_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_1_4/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA3_1_concat/conv): Conv2d(1056, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA3_1_concat/norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            (OSA3_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA3_2): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA3_2_0/conv): Conv2d(512, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_0/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA3_2_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_1/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA3_2_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_2/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA3_2_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_3/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA3_2_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_2_4/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_2_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA3_2_concat/conv): Conv2d(1312, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA3_2_concat/norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            (OSA3_2_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA3_3): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA3_3_0/conv): Conv2d(512, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_0/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA3_3_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_1/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA3_3_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_2/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA3_3_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_3/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA3_3_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA3_3_4/norm): FrozenBatchNorm2d(num_features=160, eps=1e-05)
              (OSA3_3_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA3_3_concat/conv): Conv2d(1312, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA3_3_concat/norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            (OSA3_3_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
      (stage4): _OSA_stage(
        (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (OSA4_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_1_0/conv): Conv2d(512, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_1_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_1_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_1_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_1_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_1_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_1_concat/conv): Conv2d(1472, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_1_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_2): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_2_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_2_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_2_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_2_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_2_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_2_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_2_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_2_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_2_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_2_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_3): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_3_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_3_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_3_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_3_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_3_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_3_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_3_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_3_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_3_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_3_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_4): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_4_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_4_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_4_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_4_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_4_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_4_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_4_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_4_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_4_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_4_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_5): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_5_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_5_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_5_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_5_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_5_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_5_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_5_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_5_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_5_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_5_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_6): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_6_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_6_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_6_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_6_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_6_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_6_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_6_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_6_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_6_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_6_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_7): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_7_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_7_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_7_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_7_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_7_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_7_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_7_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_7_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_7_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_7_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_8): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_8_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_8_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_8_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_8_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_8_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_8_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_8_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_8_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_8_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_8_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA4_9): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA4_9_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_0/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA4_9_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_1/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA4_9_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_2/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA4_9_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_3/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA4_9_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA4_9_4/norm): FrozenBatchNorm2d(num_features=192, eps=1e-05)
              (OSA4_9_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA4_9_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA4_9_concat/norm): FrozenBatchNorm2d(num_features=768, eps=1e-05)
            (OSA4_9_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
      (stage5): _OSA_stage(
        (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
        (OSA5_1): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA5_1_0/conv): Conv2d(768, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_0/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA5_1_1/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_1/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA5_1_2/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_2/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA5_1_3/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_3/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA5_1_4/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_1_4/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_1_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA5_1_concat/conv): Conv2d(1888, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA5_1_concat/norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            (OSA5_1_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA5_2): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA5_2_0/conv): Conv2d(1024, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_0/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA5_2_1/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_1/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA5_2_2/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_2/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA5_2_3/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_3/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA5_2_4/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_2_4/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_2_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA5_2_concat/conv): Conv2d(2144, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA5_2_concat/norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            (OSA5_2_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
        (OSA5_3): _OSA_module(
          (layers): ModuleList(
            (0): Sequential(
              (OSA5_3_0/conv): Conv2d(1024, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_0/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_0/relu): ReLU(inplace=True)
            )
            (1): Sequential(
              (OSA5_3_1/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_1/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_1/relu): ReLU(inplace=True)
            )
            (2): Sequential(
              (OSA5_3_2/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_2/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_2/relu): ReLU(inplace=True)
            )
            (3): Sequential(
              (OSA5_3_3/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_3/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_3/relu): ReLU(inplace=True)
            )
            (4): Sequential(
              (OSA5_3_4/conv): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (OSA5_3_4/norm): FrozenBatchNorm2d(num_features=224, eps=1e-05)
              (OSA5_3_4/relu): ReLU(inplace=True)
            )
          )
          (concat): Sequential(
            (OSA5_3_concat/conv): Conv2d(2144, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (OSA5_3_concat/norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            (OSA5_3_concat/relu): ReLU(inplace=True)
          )
          (ese): eSEModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
            (hsigmoid): Hsigmoid()
          )
        )
      )
    )
  )
  (proposal_generator): FCOS(
    (iou_loss): IOULoss()
    (fcos_head): FCOSHead(
      (cls_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (bbox_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (share_tower): Sequential()
      (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (scales): ModuleList(
        (0): Scale()
        (1): Scale()
        (2): Scale()
        (3): Scale()
        (4): Scale()
      )
    )
  )
  (roi_heads): CenterROIHeads(
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): SpatialAttentionMaskHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (spatialAtt): SpatialAttention(
        (conv): Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (sigmoid): Sigmoid()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
    (maskiou_head): MaskIoUHead(
      (maskiou_fcn1): Conv2d(257, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (maskiou_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (maskiou_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (maskiou_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (maskiou_fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (maskiou_fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (maskiou): Linear(in_features=1024, out_features=80, bias=True)
      (pooling): MaxPool2d(kernel_size=[2, 2], stride=[2, 2], padding=[0, 0], dilation=[1, 1], ceil_mode=False)
    )
  )
)
[06/14 19:16:17] d2.data.datasets.coco INFO: Loaded 12 images in COCO format from datasets/coco/annotations/instances_train2017.json
[06/14 19:16:17] d2.data.build INFO: Removed 0 images with no usable annotations. 12 images left.
[06/14 19:16:17] d2.data.build INFO: Distribution of instances among all 3 categories:
[36m|   category    | #instances   |   category   | #instances   |   category   | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:------------:|:-------------|
| 1_green_cap.. | 10           | 2_white_pill | 23           | 3_brown_pill | 16           |
|               |              |              |              |              |              |
|     total     | 49           |              |              |              |              |[0m
[06/14 19:16:17] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/14 19:16:17] d2.data.build INFO: Using training sampler TrainingSampler
[06/14 19:16:17] d2.data.common INFO: Serializing 12 elements to byte tensors and concatenating them all ...
[06/14 19:16:17] d2.data.common INFO: Serialized dataset takes 0.03 MiB
[06/14 19:16:17] fvcore.common.checkpoint INFO: Loading checkpoint from https://www.dropbox.com/s/1mlv31coewx8trd/vovnet99_ese_detectron2.pth?dl=1
